module Lab5

where

import Lecture5

--Exercise 1:
--Solution in Lecture5

problem1 :: Grid
problem1 = [[0,0,0,3,0,0,0,0,0],
            [0,0,0,7,0,0,3,0,0],
            [2,0,0,0,0,0,0,0,8],
            [0,0,6,0,0,5,0,0,0],
            [0,9,1,6,0,0,0,0,0],
            [3,0,0,0,7,1,2,0,0],
            [0,0,0,0,0,0,0,3,1],
            [0,8,0,0,4,0,0,0,0],
            [0,0,2,0,0,0,0,0,0]]

solution1 :: Grid
solution1 = [[4,7,8,3,9,2,6,1,5],
            [6,1,9,7,5,8,3,2,4],
            [2,3,5,4,1,6,9,7,8],
            [7,2,6,8,3,5,1,4,9],
            [8,9,1,6,2,4,7,5,3],
            [3,5,4,9,7,1,2,8,6],
            [5,6,7,2,8,9,4,3,1],
            [9,8,3,1,4,7,5,6,2],
            [1,4,2,5,6,3,8,9,7]]

problem3 :: Grid
problem3 = [[0,0,2,0,1,0,0,0,0],
            [1,0,0,5,0,0,0,0,3],
            [0,8,0,0,3,0,6,0,0],
            [0,7,9,0,0,0,0,0,0],
            [0,0,0,9,0,0,3,0,1],
            [8,0,0,0,0,0,2,0,0],
            [0,0,0,0,0,9,0,0,0],
            [0,0,1,0,0,0,0,4,9],
            [0,0,5,0,0,4,1,8,0]]

   

{-
    Exercise 2:

    In order to refactor the code such that the formulation of constraints
    becomes more uniform, the following definitions were proposed:

    > type Position = (Row,Column)
    > type Constrnt = [[Position]]

    The regular constraints for Sudoku can now be stated as:

    > rowConstrnt = [[(r,c)| c <- values ] | r <- values ]
    > columnConstrnt = [[(r,c)| r <- values ] | c <- values ]
    > blockConstrnt = [[(r,c)| r <- b1, c <- b2 ] | b1 <- blocks, b2 <- blocks ]

    The generation of the values that are still possible at a given position now
    takes the following shape:

    > freeAtPos' :: Sudoku -> Position -> Constrnt -> [Value]
    > freeAtPos' s (r,c) xs = let
    >    ys = filter (elem (r,c)) xs
    >  in
    >    foldl1 intersect (map ((values \\) . map s) ys)

    Refactor the code along the lines of this proposal, and next compare the two
    versions for extendability and efficiency. Which of the two versions is easier
    to modify for NRC sudokus, and why? Which of the two versions is more efficient?
    Devise your own testing method for this, and write a short test report.

    Deliverables: Refactored code, test report, indication of time spent.
-}

{-
    Exercise 3:

    A Sudoku problem P is minimal if it admits a unique solution, and every
    problem P' you can get from P by erasing one of the hints admits more than
    one solution. How can you test whether the problems generated by the code
    given in the lecture notes are minimal?

    Deliverables: testing code, test report, indication of time spent.
-}

check :: Node -> [(Row,Column)] -> Bool
check nod [] = True
check nod (x:xs) = not (uniqueSol (eraseN nod x)) && check nod xs

--checking if erasing one of the hints admits more than one solution
checkMinimalismLessHints :: Node -> Bool
checkMinimalismLessHints nod = check nod (filledPositions (fst nod))

--sudoku generator from Lecture5. checks if the generated sudoku has only one solution and
--if erasing one of the hints admits more than one solution
checkGenerator :: IO Bool
checkGenerator = do [r] <- rsolveNs [emptyN]
                    s  <- genProblem r
                    return (uniqueSol s && checkMinimalismLessHints s)

---Really Slow!!! Any Ideas??
--Check only with 5 or 10!!!
testing :: Int -> IO Bool
testing 0 = do
    return True
testing n = do
    rest <- (testing (n - 1))
    x <- checkGenerator
    return (x && rest)

--Exercise 4:

--list with all the positions
allPositions = [(r,c) | r <- [1..9], c <- [1..9]]

deleteBlock :: Node -> (Row,Column) -> Node
deleteBlock n (r,c) = foldr (\rc n' -> eraseN n' rc) n (sameBlock (r,c))

--list with all the positions which are included in a subgrid (given one position of this subgrid)
sameBlock :: (Row, Column) -> [(Row, Column)]
sameBlock (r,c) = [(x,y)| x <- bl r, y<- bl c]

--check if the subgrids of two positions are in the same row or column
--we don't want the three empty subgrids to be all in the same row or column
checkRC :: (Row, Column) -> (Row, Column) ->Bool
checkRC a b = (bl (fst a) /= bl (fst b) && bl (snd a) /= bl (snd b))

-- We choose 3 random positions. We make sure that they are in different subgrids and that their subgrids 
-- are not all in the same row or column.
-- We delete the 3 subgrids in which our positions are included
deleteBlocks :: Node -> IO Node
deleteBlocks n = do list1 <- randomize allPositions
                    let delBlock1 = head list1
                    let list2 =  [a | a <- list1, not (a `elem` (sameBlock delBlock1))]
                    let delBlock2 = head list2
                    let list3 =  [a | a <- list2, not (a `elem` (sameBlock delBlock2)), (checkRC a delBlock2) || (checkRC a delBlock1)]
                    let delBlock3 = head list3
                    let delBlockList = [delBlock1,delBlock2,delBlock3]
                    let newNode = foldr (\b n' -> deleteBlock n' b) n delBlockList
                    return newNode


--commented the two lines. To discuss what is a better solution!
--This way we generate sudokus with ONLY 3 blocks empty and all the other positions filled
--If i uncomment them we generate sudokus with 3 empty blocks and other empty positions as well
randomSudoku :: IO ()
randomSudoku = do [r] <- rsolveNs [emptyN]
                  showNode r
                  sudokuEmptyblocks <- deleteBlocks r
                  --s <- genProblem sudokuEmptyblocks
                  --showNode s
                  showNode sudokuEmptyblocks

{-
    Exercise 5:

    Extend the code of the lectures to create a program that generates NRC
    Sudoku problems, that is, Sudoku problems satisfying the extra constraint
    explained in the NRC exercise above.

    Deliverables: NRC Sudoku generator, indication of time spent.
-}


{-
    Exercise 6 (Bonus):

    Can you find a way of classifying the difficulty of a Sudoku problem? Can
    you modify the Sudoku problem generator so that it can generate problems
    that are minimal, but easy to solve by hand? Problems that are minimal but
    hard to solve by hand? How can you test whether the problems your program
    generates satisfy these properties? Consult (PelÃ¡nek 2014).
-}

{-
    Exercise 7 (Bonus):

    Minimal problems for NRC Sudokus need fewer hints than standard Sudoku problems.
    Investigate the difference. What is the average number of hints in a minimal
    standard Sudoku problem? What is the average number of hints in a minimal NRC
    Sudoku problem?
-}
